Kodutöö 5 Puud, Kuhi (Heap) (10 punkti)
Tähtaeg: 7. Jaanuar 2023 23:59

Ülesanne 1: Binaarpuu Implementatsioon
● Rakenda binaarpuu andmestruktuur vabalt valitud programmeerimiskeeles.
class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data
    def outputPuu(self):
        print(self.data)
baas = Node(69) #hehe
baas.outputPuu()


Ülesanne 2: Kuhja (Heap) Struktuuri Teoreetiline Analüüs
● Kirjelda min-kuhja ja max-kuhja struktuuride teoreetilisi omadusi.
min-heap-i juursõlm on alati võrdse või väiksema väärtusega, kui sõlme alamväärtusest.
max-heap-il vastupidi, kus juursõlme väärtus on võrdne või suurem tema alamväärtustest.
● Analüüsi nende struktuuride aja- ja ruumikomplekssust.
min/max heap ruumikompleksus on O(n), kuna andmed on ennikus ja vajavad n kogus ruumi.
min/max heap ajakompleksus on ka O(n) andmete kogusest sõltuvalt.
● Aruta, kuidas kuhja struktuurid sobivad andmete sorteerimiseks ja
prioriteetjärjekordade haldamiseks.
Heap struktuurid sobivad andmete sorteerimiseks, kuna nad sorteerivad andmeid kasvavas
või kahanevas järjekorras. Aitab leida väikseima või suurema väärtuse. Heap struktuuri
kasutades eemaldab ta otsimise käigus ebavajalikud väärtused, vähendades mälukasutust.
Kuna kõik juured ja nende alamad on kas min või max heap süsteemiga, on lihtne hallata
otsimisel järjekorda.

Ülesanne 3: Binaarse Otsingupuu (Binary Search Tree, BST)
Teoreetiline Analüüs
● Kirjelda binaarse otsingupuu (BST) andmestruktuuri ja selle põhielemente.
BST andmestruktuur on jaotatud binaarne puu, mille elemendid on sorteeritud.
BST põhielemendoid on üles ehitatud nii, et (alam)juurest vasakul asuv element on alati
väiksem kui (alam)juur ja paremal suurem kui (alam)juur ise. 
● Arutle, kuidas tasakaalustamata puud mõjutavad BST tõhusust ja kuidas seda
saab teoreetiliselt optimeerida.
Tasakaalustamata puud muudavad BST tõhusust ajakompleksusest O(log n) kompleksusele
O(n), kus n on puu kõrgus ja andmete väärtus. See muudab BST kiiruse lineaarseks ja
teeb binaarse otsingupuu kasutuks. Tasakaalustamine on vajalik.
Üks viisidest optimeerimiseks on puu tasakaalustada kõrguse poolest, kus kõrgus peab jääma
konstantseks. Seda viisi tutvustati AVL puu-ga ja Punase Musta puuga.

Ülesanne 4: Punase-Musta Puu (Red-Black Tree) Teoreetiline
Ülevaade
● Kirjelda punase-musta puu andmestruktuuri ja selle peamisi omadusi.
Punase-Musta puu andmestruktuur on spetsiaalne BST andmestruktuur kiire ja tõhusa
andmete leidmise jaoks. See kasutab kahte värvi andmete markeerimiseks, mis 
garanteerib selle kiiruse ja tõhususe, kuna andmetel on ühe bitine värvuse kood
juures. Värve kasutatakse andmete taaskaalustamise juures, et organiseerimine ja uuesti
värvimine oleks tõhus.
● Võrdle teoreetiliselt punase-musta puu ja binaarse otsingupuu tõhusust.
Aja- ja ruumikompleksus on mõlemal puul O(log n) ja O(n) vastavalt, kuid
punase-musta puu sisestus ja eemaldamise kiirus on kiirem, ajaliselt O(1),
kuid BST omad on mõlemad O(log n).
● Aruta, kuidas punase-musta puu tasakaalustamine ja värvireeglid aitavad
kaasa andmestruktuuri tõhususele.
Puule uute elementide lisamisel taaskaalutakse ja värvitakse puu värvide kaudu,
et piirata puu tasakaalustamata olekut, tagades kiiruse ja tõhususe. Värvid piiravad
puu tasakaalustamatust, niiet elementide ümberkorraldus on tõhusam.

Ülesanne 5: AVL Puu vs. Punase-Musta Puu Teoreetiline Võrdlus
● Kirjelda AVL puu andmestruktuuri ja selle peamisi omadusi.
AVL puu on ise-tasakaalustuv BST, mille alamjuurte kaugus üksteisest on alati
maksimaalselt üks. Elemente lisades ja eemaldades AVL puu balanseerib ennast ise,
et alamjuured oleks samal kaugusel (max kaugus 1).
● Võrdle teoreetiliselt AVL puu ja punase-musta puu tõhusust.
AVL puu ja Punase-Musta puu aja- ja ruumikompleksus on sama, ajakompleksusega O(log n)
ja ruumikompleksusega O(n). AVL puu ja Punase-Musta puu tõhusus on sarnane, kuna mõlemad
tasakaalustavad ennast ise ja alamjuurte kaugus on sama. Kumbki ei ole raskusest tasakaalustatud.
● Analüüsi, millistes rakendustes oleks üks struktuur teisele eelistatav ja
põhjenda oma valikuid.
AVL puud oleks eelistatum variant kasutada, kui on vaja rohkelt andmeid otsida puust üles, kuna
AVL puud on rangemalt tasakaalustatud. AVL puid on parem kasutada andmebaasides, kus on vaja kiirelt
leida andmeid. 
Punase-musta puud on parem kasutada suurtes andmebaasides, kuna värvide kasutamine kasutab vähem ruumi
otsimises ja haldamises, kui AVL puud, millel on andmetel kaugused küljes. Punase-musta puu tasakaalustamine
on ka tõhusam andmete lisamises, kuna see vajab vähem juurte liigutamist.
kokkuvõtteks: AVL puud on parem kasutada andmebaasides, kus kiirus ja tõhusus on oluline.
Punase-musta puud on parem kasutada andmebaasides, kus andmete kogus on suur. Lisaks on punase musta
puu tõhusam uute andmete lisamises ja eemaldamises.

Boonusülesanne (2 punkti):
● Analüüsi ja võrdle erinevaid binaarpuude tasakaalustamise algoritme
(näiteks AVL, punase-musta, Splay puud, B-tree) teoreetiliselt. Selgita, kuidas
need algoritmid aitavad optimeerida andmestruktuuride jõudlust erinevates
rakendustes
AVL puude head küljed: kiired, tõhusad, komplekse ja rangete reeglitega (tasakaalustamise suhtes)
puud, mis on kiired otsijad, aga aeglased lisajad/eemaldajad uute andmete suhtes.
Punase-musta puud: aeglane leidja, kiire sisestus/eemaldamine, vähem ruumi võtab, suur andmebaas jaoks hea.
kuidas need aitavad optimeerida:
AVL puud : kiire leidmine, kasulik suurtes andmebaasides asjade leidmises. miinus: sisestus ja eemaldus raske, peab balanseerima kaua
P-M puud : aeglane leidja, kasulik suurtes andmebaasides asjade lisamises ja eemaldamises.
suured andmebaasid kasutaks pigem AVL puud, kelle jaoks on andmete leidmine andmebaasis oluline.
    nt andmebaasid, networkid, translaatorid, failide süsteemid.
P-M puud oleks kasulikud suurtes andmebaasides, kus kiirus pole oluline.
    masinõpe, funktsionaalne programeerimine, minecraft(tglt Java kasutab P-M), arvutuslik geomeetria
